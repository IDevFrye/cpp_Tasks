#include <iostream>

int main()
{
    setlocale(LC_ALL, "Russian");
    double elOfSequence;
    int tempEl = 0; int maxOfSequence = 0;
    std::cout << "Введите последовательность целочисленных элементов (0 - признак окончания поселдовательности): " << std::endl;
    std::cin >> elOfSequence; // вводим первый элемент последовательности
    if ((std::cin.fail()) || (floor(elOfSequence) != elOfSequence)) { // проверка на целочисленность и корректный ввод числа первого элемента
        std::cout << "Ошибка: в последовательности есть не целое число. Завершение программы.";
        return 0;
    }
    if (elOfSequence == 0) { // проверка на пустую последовательность
        std::cout << "Ошибка: последовательность пустая. Завершение программы.";
        return 0;
    }
    while (elOfSequence != 0) {
        if (int(elOfSequence) % 2 == 0) { // проверка чётности элемента
            tempEl++;
        }
        else {
            tempEl > maxOfSequence ? maxOfSequence = tempEl : 0; // обновление максимальной длины подпоследовательности, состоящей из чётных элементов
            tempEl = 0; // обнуление временной переменной для каждой отдельной подпоследовательности
        }
        std::cin >> elOfSequence; // ввод элемента последовательности
        if ((std::cin.fail()) || (floor(elOfSequence) != elOfSequence)) { // проверка на целочисленность и корректный ввод числа
            std::cout << "Ошибка: в последовательности есть не целое число. Завершение программы.";
            return 0;
        }
    }
    tempEl > maxOfSequence ? maxOfSequence = tempEl : 0; // обновление максимальной длины подпоследовательности, состоящей из чётных элементов
    if (maxOfSequence == 0) { // проверка на нечётность всех элементов последовательности
        std::cout << "Все элементы последовательности нечётны, максимальное количество идущих подряд чётных элементов равно нулю. Завершение программы." << std::endl;
        return 0;
    }
    std::cout << "Максимальное число подряд идущих чётных элементов последовательности: " << maxOfSequence << ".";
    return 0;
}